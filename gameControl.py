import random


class Game:
    def __init__(self):
        print('\n' + '=' * 50)
        print('–û–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º –≤—ã–¥–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —á–∏—Å–µ–ª, –∫–∞–∂–¥—ã–π —Ö–æ–¥ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –±–æ—á–æ–Ω–æ–∫ (—á–∏—Å–ª–æ)')
        print('–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.')
        print('! –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫—Ä–æ–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –Ω–∞ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ.')
        print('!! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ, –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏')
        print('–Ω–∞–ª–∏—á–∏–∏ –±–æ—á–æ–Ω–∫–∞, —Ç–æ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ.')
        print('=' * 50 + '\n')

        self.used_numbers = set()
        self.bag = list(range(1, 91))
        random.shuffle(self.bag)

    def pullout_number(self):
        """–î–æ—Å—Ç–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–æ—á–æ–Ω–æ–∫"""
        if not self.bag:
            return None

        number = self.bag.pop()
        self.used_numbers.add(number)

        if number < 10:
            unitType = '–¶–∏—Ñ—Ä–∞'
        else:
            unitType = '–ß–∏—Å–ª–æ'
        print(f"{unitType} - {number}")
        return number

    def provide_options(self, player, current_number):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫—É"""
        if player.is_bot:
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞ –±–æ—Ç–∞
            import time
            time.sleep(1)

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞
            if player.has_number(current_number):
                print(f"{player.name} –∑–∞—á–µ—Ä–∫–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ {current_number}")
                return '1'
            else:
                print(f"{player.name} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä—É")
                return '2'
        else:
            print(f'\n{player.name}, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?')
            print('1. –ó–∞—á–µ—Ä–∫–Ω—É—Ç—å')
            print('2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')

            while True:
                choice = input('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ')
                if choice in ['1', '2']:
                    return choice
                print('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π –ø—É–Ω–∫—Ç (1 –∏–ª–∏ 2)')

    def check_choice(self, player, choice, current_number):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞"""
        has_number = player.has_number(current_number)

        if choice == '1':  # –ó–∞—á–µ—Ä–∫–Ω—É—Ç—å
            if has_number:
                player.mark_number(current_number)
                print(f"{player.name} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—á–µ—Ä–∫–Ω—É–ª —á–∏—Å–ª–æ {current_number}")
                return True
            else:
                print(f"{player.name} –ø—ã—Ç–∞–ª—Å—è –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ {current_number}!")
                player.lost = True
                return False

        else:  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            if has_number:
                print(f"{player.name} –Ω–µ –∑–∞—á–µ—Ä–∫–Ω—É–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ {current_number}!")
                player.lost = True
                return False
            else:
                print(f"{player.name} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–ª –∏–≥—Ä—É")
                return True

    def display_cards(self, player1, player2):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤"""
        print(f"\n{player1.name}:")
        print(player1.card)
        print(f"\n{player2.name}:")
        print(player2.card)

    def start_game(self, player1, player2):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"""
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É...")

        while self.bag and not (player1.lost or player2.lost):
            print('\n' + '=' * 30)
            print(f"–û—Å—Ç–∞–ª–æ—Å—å –±–æ—á–æ–Ω–∫–æ–≤: {len(self.bag)}")

            # –î–æ—Å—Ç–∞–µ–º –Ω–æ–≤—ã–π –±–æ—á–æ–Ω–æ–∫
            current_number = self.pullout_number()
            if current_number is None:
                break

            # –•–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if not player1.lost:
                choice1 = self.provide_options(player1, current_number)
                if not self.check_choice(player1, choice1, current_number):
                    print(f"{player1.name} –ø—Ä–æ–∏–≥—Ä–∞–ª!")
                    break

                if player1.is_winner():
                    print(f"\nüéâ {player1.name} –ø–æ–±–µ–¥–∏–ª!")
                    break

            # –•–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª)
            if not player1.lost and not player1.is_winner() and not player2.lost:
                choice2 = self.provide_options(player2, current_number)
                if not self.check_choice(player2, choice2, current_number):
                    print(f"{player2.name} –ø—Ä–æ–∏–≥—Ä–∞–ª!")
                    break

                if player2.is_winner():
                    print(f"\nüéâ {player2.name} –ø–æ–±–µ–¥–∏–ª!")
                    break

            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
            self.display_cards(player1, player2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
            if player1.is_winner() or player2.is_winner() or player1.lost or player2.lost:
                break

        # –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
        if player1.lost and player2.lost:
            print("\n–û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–∏—á—å—è.")
        elif player1.lost:
            print(f"\n{player2.name} –ø–æ–±–µ–¥–∏–ª!")
        elif player2.lost:
            print(f"\n{player1.name} –ø–æ–±–µ–¥–∏–ª!")
        elif player1.is_winner():
            print(f"\nüéâ {player1.name} –ø–æ–±–µ–¥–∏–ª!")
        elif player2.is_winner():
            print(f"\nüéâ {player2.name} –ø–æ–±–µ–¥–∏–ª!")
        elif not self.bag:
            print("\n–ë–æ—á–æ–Ω–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ù–∏—á—å—è.")

        print("\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")